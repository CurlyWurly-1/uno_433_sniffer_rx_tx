/*
sketch : sniffer_433_RX       (sister of "sniffer_433_TX")
Author : Peter Matthews (CurlyWurly)   May 2017
Desc   : When a static 433 transmission is received, a "int codez[]=.." line is output to the serial bus.
         Copy this line and paste it into the the sister sketch "sniffer_433_TX"   
INFORMATION
  N.B. Connect pin 2 (rxpin) to the RX module output
  N.B. Copy the output "int codez[] = ...." from serial bus and copy into the sister sketch "Sniffer_433_TX"
  N.B. This sniffer sketch just outputs a set value of 35 in code[0]. This means that you may have to 
       experiment using a different "repeat" value (usually a value of 15 - 45) when used in the "TX" sketch 
  N.B. The code structure is contained from code[0] to code[n] and is defined as:
          code[0] - No. of times to repeat the code
          code[1] - No. of pulses (Hi/low combination) - This means it is half the total number of Hi and Low states 
          code[2] - Wait unit time (Hi and Low states are constructed with multiples of this) 
          code[3] - First HIGH state multiplier - multiply with code[2]   
          code[4] - First LOW  state multiplier - multiply with code[2]   
          ....
          code[n] - last LOW   state multiplier
      The     first  pulse is made up of code[3] and code[4]
      and the second pulse is made up of code[5] and code[6]
*/

#include <TimeLib.h>

#define rxPin            2    // Input from receiver
#define maxState       300    // Maximum States (Halve for pulses, will detect "pulse trains" up to 150 pulses long)
#define minStartLow  10000    // Min start pause (to indicate that pulses are finished  
#define minBreakLow  10000    // Min break pause   

bool          trig;               // recording started
bool          pinstate;           // State of input pin - Hi(1) or Low(0)
int           stateCount;         // State change counter
int           pulses;             // Number of pulses (half of stateCount) 
int           i;                  // Array counter

unsigned long T_array[maxState];  // Array of HiLo pulse lengths (starts with Hi)
bool          B_array[(maxState/2)];  // Array of HiLo pulse lengths (starts with Hi)
unsigned long firstLow;           // First Low length (can replace lastLow)
unsigned long minlengthHI;        // Minimum Hi pulse length in us
unsigned long minlengthLOW;       // Minimum Lo pulse length in us
unsigned long pulseLen;           // pulse length in us
unsigned long startTime;          // Start Time of pulse in us
unsigned long endTime;            // End   Time of pulse in us
unsigned long unitlen;            // lowest AVG pulse length in us (assumed L.C.Denominator)

//*********************************************************************************************
void setup() {
//*********************************************************************************************
  pinMode(rxPin, INPUT);      // initialize input pin used for input signal
  Serial.begin(115200);       // Set up Serial baud rate 
  Serial.println("Scanning for 433Mhz signals");
  startTime     = micros();   // Store first "Start time"
  pinstate      = false;      // prepare stored version of pin state to start as "low"
  trig          = false;      // initialise 
}

//*********************************************************************************************
void loop() {
//*********************************************************************************************
// If a state change, then calculate pulselen
  if (pinstate != digitalRead(rxPin)) {
    pinstate   = !pinstate;
    endTime    = micros();                // Record the end time of the read period.
    pulseLen   = endTime - startTime;     // Calculate Pulse length in us
    startTime  = endTime;                 // Remember start time for next state change

// If  previous pulse Length is less than 200 Us or greater than 1 second, reset 
    if ( ( pulseLen < 200 ) || ( pulseLen > 1000000 ) ) {
      trig          = false; 
    } else {
      if ( ( trig == false ) &&  ( pulseLen > minStartLow)  &&  ( pinstate == true ) ) {
        trig          = true;       // initialise 
        stateCount    = 0;          // initialise 
        firstLow      = pulseLen;
        return;  
      };
    };

// Return if not triggered 
    if ( trig == false ) { 
      return;      
    };

// Store previous state time length (N.B. even indexes are for high, odd index is for low)
    T_array[stateCount] = pulseLen;            // Store Pulse Length 

// If previous state time length is less than minStartLow, then store pulse length
// and return to keep recording state 
    if ( ( pulseLen < minBreakLow ) && ( stateCount < maxState ) ) {
      stateCount++;    
      return;
    }

//********************************************************************************
// If you are here, then we have reached a pause (    should be a Low state), so 
// interpret the array data to decipher the "code" to serial before trying again      
//********************************************************************************

// If necessary, massage time length of "lastlow" to the "firstlow"  
// It is assumed that the "HIGH" state will never be long
    if ( pulseLen > firstLow ) { 
       T_array[stateCount] = firstLow;
    }

// Calculate Min lengths
    minlengthHI   = 9999;
    minlengthLOW  = 9999;
    for(i=0; i<=stateCount; i=i+1){
      if ( ( i % 2) == 0 ) {
        if (T_array[i] < minlengthHI)  { minlengthHI  = T_array[i]; }
      } else {
        if (T_array[i] < minlengthLOW) { minlengthLOW = T_array[i]; };
      };
    };

// Calculate Avg unit length of pulses
    unitlen = 0;
    if ( minlengthLOW < ( minlengthHI  / 2 )) {
      unitlen = minlengthLOW ;
    } else {
      unitlen = ( ( minlengthHI + minlengthLOW ) / 2 );
    };    

// Calculate pulses
    pulses = ( (stateCount + 1) / 2);

//********************************************************************************************
// Example Interpretion of message to Binary string which is then stored in B_array[]
// This example uses the length of the "High" state (Even indexes)
//    if long,  then this is a "0"
//    if short, then this is a "1"
// N.B.  B_array[] will always have half as many indexes as T_array[] !!
//  for(i=0; i<=stateCount; i=i+2){
//    if ( ( (T_array[i] * 10) + (5 * minlengthHI)  ) / (10 * minlengthHI) == 1 ) {
//      B_array[(i/2)] = 1;
//    } else {
//      B_array[(i/2)] = 0;
//    };
//  };
//  Serial.println(" ");

//********************************************************************************************
// Example check for a particular message ( unitlen = 660, pulses = 79, First 7 pulses are short Hi ) 
//  if (    (unitlen <  600)
//       || (unitlen >  700) 
//       || (pulses  != 79) 
//       || (B_array[0] != 1) || (B_array[1] != 1) || (B_array[2] != 1) || (B_array[3] != 1)  
//       || (B_array[4] != 1) || (B_array[5] != 1) || (B_array[6] != 1)) {
//    return;
//  };

//********************************************************************************************
// Example output of binary string
//  for(i=0; i<=pulses; i=i+1){
//    Serial.print(B_array[i]);
//  };
//  Serial.println(" ");    

// Output deciphered data for TX sketch
    Serial.print("int codez[] = {35,");
    Serial.print( pulses );
    Serial.print(",");
    Serial.print(unitlen);
    for(i=0; i<=stateCount; i=i+1){
      Serial.print(",");
//    Serial.print( (T_array[i] / unitlen) );          // Alternative round down
      Serial.print( ( (T_array[i] * 10) + (5 * unitlen)  ) / (10 * unitlen) );
    };
    Serial.println("};");
  
    trig          = false;       // initialise 
  };
}
